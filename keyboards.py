from aiogram import types
from country import COUNTRY
from services import SERVICE
from rent_services import RENT_SERVICE
from operators import OPERATORS
import sqlite3

async def menu_keyboard(user_id):
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 2)
	keyboard.add(
		types.KeyboardButton(text = 'üõí –ù–æ–º–µ—Ä–∞'),types.KeyboardButton(text = 'üì¨ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'),
		types.KeyboardButton(text = 'ü´Ö –ü—Ä–æ—Ñ–∏–ª—å'),
		types.KeyboardButton(text = ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
		)
	keyboard.add(
		types.KeyboardButton(text = '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
		)
	from func import get_admin_status
	adminka = await get_admin_status(user_id)
	if adminka == 1:
		keyboard.add(
			types.KeyboardButton(text = 'ü•∑ –ê–¥–º–∏–Ω–∫–∞')
			)
	#adminka = await get_admin_status(user_id)
	#if adminka == 1:
		#btn2 = types.KeyboardButton(text = '–ê–¥–º–∏–Ω–º–µ–Ω—é')
		#keyboard.add(btn2)

	return keyboard

async def countries_menu_keyboard(us_id, i: int):
	conn = sqlite3.connect('db.db', check_same_thread = False)
	cursor = conn.cursor()
	row = cursor.execute('SELECT country_id, service_id, operator_id FROM last_zakaz WHERE user_id = ?',[us_id]).fetchone()
	keyboard = types.InlineKeyboardMarkup(row_width=3)
	btn = []
	navigation = []
	back = i
	stop = i+12
	num = 0
	for pack in COUNTRY.items():
		num +=1
		#print(num)
		if i < num:
			if i < stop:
				btn.append(types.InlineKeyboardButton(text = pack[1], callback_data='set_country|{0}'.format(pack[0])))
				i +=1
	keyboard.add(*btn)
	try:
		if row[0] != 'no':
			service_id = row[1]
			country_id = row[0]
			data = SERVICE.get(str(country_id))
			for s_id in data.keys():
				if s_id == service_id:
					service_name = data.get(service_id)
					flag = COUNTRY.get(str(country_id))
					flag = flag[:2]
					keyboard.add(types.InlineKeyboardButton(text = f'‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑({flag} | {service_name})', callback_data='set_service|{0}|{1}|{2}'.format(row[1], row[0], row[2])))
					break
	except:
		pass
		#keyboard.add(types.InlineKeyboardButton(text = '–õ–∞—Å—Ç –∑–∞–∫–∞–∑', callback_data='set_service|{0}|{1}'.format(row[1], row[0])))
	keyboard.add(
		types.InlineKeyboardButton(text = 'üîé –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã', callback_data=f'find_country')
		)
	if i > 12:
		navigation.append(types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'next_country|{back - 12}'))

	if len(btn) == 12:
		navigation.append(types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next_country|{i}'))
	keyboard.add(*navigation)

	return keyboard


async def operators_menu_keyboard(i: int, country_id):
	keyboard = types.InlineKeyboardMarkup(row_width=3)
	btn = []
	navigation = []
	stop = i+12
	back = i
	num = 0
	SR_KEY = OPERATORS.get(str(country_id))

	for pack in SR_KEY.items():
		num +=1
		#print(num)
		if i < num:
			if i < stop:
				btn.append(types.InlineKeyboardButton(text = pack[1], callback_data='set_operator|{0}|{1}'.format(pack[0], country_id)))
				i +=1
	keyboard.add(*btn)
	if i > 12:
		navigation.append(types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'next_operator|{country_id}|{back-12}'))

	if len(btn) == 12:
		navigation.append(types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next_operator|{country_id}|{i}'))
	keyboard.add(*navigation)
	return keyboard


async def get_params_activation(i:int, operator):
	keyboard = types.InlineKeyboardMarkup(row_width = 2)
	keyboard.add(
		types.InlineKeyboardButton(text = '–ê–∫—Ç–∏–≤–∞—Ü–∏—è', callback_data=f'get_activation_service|{i}'),
		types.InlineKeyboardButton(text = '–ê—Ä–µ–Ω–¥–∞', callback_data=f'get_rent_service|{i}'),
		types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=f'set_country|{i}')
		#types.InlineKeyboardButton(text = '–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤', callback_data=f'get_multi_service|{i}')
		)
	return keyboard




async def services_menu_keyboard(i: int, country: int, us_id):
	conn = sqlite3.connect('db.db', check_same_thread= True)
	cursor = conn.cursor()
	row = cursor.execute('SELECT * FROM most_buy_service').fetchall()
	row.sort(key=lambda x: x[2], reverse=True)
	operator = cursor.execute('SELECT operator FROM users WHERE user_id = ?',[us_id]).fetchone()[0]
	keyboard = types.InlineKeyboardMarkup(row_width=3)
	btn = []
	navigation = []
	stop = i+12
	back = i
	num = 0
	SR_KEY = SERVICE.get(country)
	for top in row:
		if top[1] in SR_KEY.keys():
			num +=1
			#print(num)
			if i < num:
				if i < stop:
					if i < 3:
						btn.append(types.InlineKeyboardButton(text = "üî• " + top[0], callback_data='set_service|{0}|{1}'.format(top[1], country)))
					else:
						btn.append(types.InlineKeyboardButton(text = top[0], callback_data='set_service|{0}|{1}'.format(top[1], country)))
					i +=1
	keyboard.add(*btn)
	if i > 12:
		navigation.append(types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'next_service|{country}|{back-12}'))

	if len(btn) == 12:
		navigation.append(types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next_service|{country}|{i}'))
	keyboard.add(
		types.InlineKeyboardButton(text = 'üîé –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–∞', callback_data=f'find_service|{country}')
		)
	keyboard.add(*navigation)
	keyboard.add(
		types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=f'set_operator|{operator}|{country}')
		)
	return keyboard


async def service_info(us_id, api, country_id, service_id,):
	conn = sqlite3.connect('db.db', check_same_thread = False)
	cursor = conn.cursor()

	price = cursor.execute('SELECT price_sms FROM users WHERE user_id = ?',[us_id]).fetchone()[0]
	nacenka = cursor.execute('SELECT nacenka FROM nacenka_services WHERE ids = (?)', (service_id,)).fetchone()[0]
	if nacenka == 0:
		nacenka = cursor.execute('SELECT nacenka FROM settings').fetchone()[0]
	in_fav = cursor.execute('SELECT user_id FROM favorite_service WHERE user_id = ? AND country = ? AND service = ?',[us_id, country_id, service_id]).fetchone()
	ftext = '‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' if in_fav == None else '‚≠êÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
	keyboard = types.InlineKeyboardMarkup(row_width=3)
	keyboard.add(
		types.InlineKeyboardButton(text = f'–ö—É–ø–∏—Ç—å | {price+nacenka} RUB', callback_data = f'buy_number|{service_id}|{api}|{price}|0|{country_id}|'),
		types.InlineKeyboardButton(text = ftext, callback_data = f'add_fav|{service_id}|{country_id}')
		)
	keyboard.add(
		types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'get_activation_service|{country_id}')
		)
	return keyboard


async def rent_services_menu_keyboard(i: int, country: int, us_id):
	conn = sqlite3.connect('db.db', check_same_thread= True)
	cursor = conn.cursor()
	row = cursor.execute('SELECT * FROM most_buy_service').fetchall()
	row.sort(key=lambda x: x[2], reverse=True)
	operator = cursor.execute('SELECT operator FROM users WHERE user_id = ?',[us_id]).fetchone()[0]
	keyboard = types.InlineKeyboardMarkup(row_width=3)
	btn = []
	back = i
	navigation = []
	stop = i+12
	num = 0
	SR_KEY = RENT_SERVICE.get(str(country))
	try:
		for top in row:
			if top[1] in SR_KEY.keys():
				num +=1
			#print(num)
				if i < num:
					if i < stop:
						if i < 3:
							btn.append(types.InlineKeyboardButton(text = "üî• " + top[0], callback_data='set_rent_service|{0}|{1}'.format(top[1], country)))
						else:
							btn.append(types.InlineKeyboardButton(text = top[0], callback_data='set_rent_service|{0}|{1}'.format(top[1], country)))
						i +=1
		keyboard.add(*btn)
		if i > 12:
			navigation.append(types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'next_rent_service|{country}|{back-12}'))
			#btn.append(types.InlineKeyboardButton(text = pack[1], callback_data='set_rent_service|{0}|{1}'.format(pack[0], country)))

		if len(btn) == 12:
			navigation.append(types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next_rent_service|{country}|{i}'))
		keyboard.add(*navigation)
		keyboard.add(
			types.InlineKeyboardButton(text = 'üîé –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–∞', callback_data=f'find_rent_service|{country}')
			)
		return keyboard
	except:
		keyboard.add(
			types.InlineKeyboardButton(text='‚ùå –ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ :(', callback_data='0ew0fko')
			)
	finally:
		keyboard.add(
			types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=f'set_operator|{operator}|{country}')
			)
	return keyboard

async def get_rent_time_keyboard(service_id, country_id):
	keyboard = types.InlineKeyboardMarkup(row_width = 2)
	keyboard.add(
		types.InlineKeyboardButton(text = '‚ñ™Ô∏è4 —á–∞—Å–∞', callback_data = f'timeRent|4|{service_id}|{country_id}'),
		types.InlineKeyboardButton(text = '‚ñ™Ô∏è12 —á–∞—Å–æ–≤', callback_data = f'timeRent|12|{service_id}|{country_id}'),
		types.InlineKeyboardButton(text = '‚ñ™Ô∏è1 –¥–µ–Ω—å', callback_data = f'timeRent|24|{service_id}|{country_id}'),
		types.InlineKeyboardButton(text = '‚ñ™Ô∏è3 –¥–Ω—è', callback_data = f'timeRent|72|{service_id}|{country_id}'),
		types.InlineKeyboardButton(text = '‚ñ™Ô∏è1 –Ω–µ–¥–µ–ª—è', callback_data = f'timeRent|168|{service_id}|{country_id}'),
		types.InlineKeyboardButton(text = '‚ñ™Ô∏è2 –Ω–µ–¥–µ–ª–∏', callback_data = f'timeRent|336|{service_id}|{country_id}'),
		types.InlineKeyboardButton(text = 'üî∫–ù–∞–∑–∞–¥', callback_data= f'get_rent_service|{country_id}')
		#types.InlineKeyboardButton(text = '‚ñ™Ô∏è1 –º–µ—Å—è—Ü', callback_data = f'timeRent|730|{service_id}|{country_id}')
		)
	return keyboard

async def payments_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(
    	types.InlineKeyboardButton('üí≥ QIWI CARD'),
    	types.InlineKeyboardButton('ü§ñ BTC BANKER'),
    	types.InlineKeyboardButton('–ú–µ–Ω—é')
    	)
    return keyboard

async def admin_keyboard():
	keyboard = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard=True, row_width = 2)
	keyboard.add(
		types.InlineKeyboardButton(text= '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π')
		)
	buttons = [
	types.KeyboardButton(text='üî∏–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É'),
	types.KeyboardButton(text='üî∏–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'),
	types.KeyboardButton(text='üî∏–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
	types.KeyboardButton(text='üî∏–í—ã–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –±–∞–ª–∞–Ω—Å'),
	types.KeyboardButton(text='üî∏–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–∫'),
	types.KeyboardButton(text = 'üî∏–ú–µ–Ω—é')
	]
	keyboard.add(*buttons)
	return keyboard

async def api_site_keyboard():
	keyboard = types.InlineKeyboardMarkup(row_width = 2)
	keyboard.add(
		types.InlineKeyboardButton(text = 'SMS-ACTIVATE', callback_data= 'setkey|sms_activate'),
		types.InlineKeyboardButton(text = 'VAK-SMS', callback_data= 'setkey|vak_sms'),
		types.InlineKeyboardButton(text = 'SMS-ACTIWATOR', callback_data= 'setkey|sms_actiwator'),
		types.InlineKeyboardButton(text = '5sim', callback_data= 'setkey|SIM5')
		)
	return keyboard
		



